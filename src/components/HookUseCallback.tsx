import { FC, useCallback, useState } from "react";

const HookUseCallback: FC = () => {
  const [count, setCount] = useState(0);

  const handleIncrement = useCallback(() => {
    setCount(count + 1);
  }, [count]);

  return (
    <div>
      <div>
        <p>Count: {count}</p>
        <button onClick={handleIncrement}>Increment</button>
      </div>
      <div>
        <h3>Описание:</h3>
        <div>
          useCallback - это хук в React, который используется для оптимизации
          производительности путем кеширования колбэк-функций. Он помогает
          избежать создания новых экземпляров функций при каждом рендере
          компонента, что может привести к лишней перерисовке дочерних
          компонентов.
        </div>
        <div>
          <h3>Синтаксис:</h3>
          <div>
            useCallback принимает два аргумента: саму колбэк-функцию и массив
            зависимостей. Зависимости - это список переменных, изменение которых
            может привести к изменению создаваемой функции. Если зависимости не
            изменились с предыдущего рендера, useCallback возвращает
            закешированную функцию, иначе он создает новую.
          </div>
          <img
            src="/images/usecallback-example-1.jpg"
            alt="useCallback Example 1"
          />
        </div>
      </div>
      <div style={{ maxWidth: "70%", margin: "12px auto" }}>
        <h3>Практическое применение:</h3>
        <div>
          <b>
            1. Оптимизация вычислений:
            <br />
          </b>
          useCallback используется для оптимизации производительности, когда
          создание новых экземпляров колбэк-функций при каждом рендере может
          привести к ненужным перерисовкам компонентов.
        </div>
        <div>
          Используйте useCallback, когда передача колбэк-функции в дочерние
          компоненты или хуки зависит от изменения какой-либо переменной. Также
          он полезен, когда вы используете колбэк-функции внутри useEffect или
          useMemo.
        </div>
        <h3>Не переусердствуйте:</h3>
        <div>
          Не стоит оборачивать каждую функцию в useCallback. Это имеет смысл
          только тогда, когда вы замечаете проблемы с производительностью из-за
          создания новых экземпляров функций.
        </div>
      </div>
    </div>
  );
};

export default HookUseCallback;
