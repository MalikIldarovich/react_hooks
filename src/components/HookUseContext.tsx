import { FC } from "react";
import { useAuth } from "./context/AuthContext";

const HookUseContext: FC = () => {
  const { isAuth, setIsAuth } = useAuth();
  return (
    <div>
      <h3>Авторизация: {isAuth ? "Пройдена" : "Отсутствует"}</h3>
      <button onClick={() => setIsAuth(true)}>Авторизоваться</button>
      <div>
        <h3>Определение</h3>
        <div>
          useContext - это хук в React, который позволяет компонентам получать
          доступ к контексту, переданному через Context.Provider. Контекст
          позволяет передавать данные "глубоко" в дерево компонентов, минуя
          промежуточные компоненты, которые не нуждаются в этих данных.
        </div>
        <h3>Контекст (Context):</h3>
        <div>
          Контекст - это механизм, который позволяет передавать данные через
          дерево компонентов, без явной передачи пропсов через промежуточные
          компоненты. Контекст может быть полезен для глобального состояния,
          тем, настроек и других данных, доступных всем компонентам в иерархии.
        </div>
        <h3>Создание контекста:</h3>
        <div>
          Для использования useContext, вам сначала нужно создать контекст с
          помощью React.createContext. Этот контекст будет предоставлять
          значения, которые могут быть получены с помощью useContext. Пример
          создания контекста:
        </div>
        <img
          src="/images/usecontext-example-1.jpg"
          alt="useContext Example 1"
        />
        <h3>Использование контекста:</h3>
        <div>
          Чтобы использовать данные из контекста, вы можете использовать
          useContext(MyContext) внутри функционального компонента. Этот хук
          возвращает текущее значение контекста. Пример использования:
        </div>
        <img
          src="/images/usecontext-example-2.jpg"
          alt="useContext Example 2"
        />
        <h3>Предоставление значений: </h3>
        <div>
          Для предоставления значений контекста компонентам используйте
          MyContext.Provider вокруг дочерних компонентов. Значения передаются
          через value в Provider. Пример предоставления значений:
        </div>
        <img
          src="/images/usecontext-example-3.jpg"
          alt="useContext Example 3"
        />
        <h3>Передача сложных значений: </h3>
        <div>
          Вы можете передавать более сложные объекты или функции через контекст.
          При этом имейте в виду, что изменения в контексте могут вызвать
          перерисовку всех компонентов, использующих этот контекст. useContext
          стоит использовать, когда у вас есть данные, которые должны быть
          доступны нескольким компонентам в иерархии без необходимости передачи
          пропсов через промежуточные компоненты.
        </div>
        <div>
          useContext стоит использовать, когда у вас есть данные, которые должны
          быть доступны нескольким компонентам в иерархии без необходимости
          передачи пропсов через промежуточные компоненты.
        </div>
      </div>
    </div>
  );
};

export default HookUseContext;
